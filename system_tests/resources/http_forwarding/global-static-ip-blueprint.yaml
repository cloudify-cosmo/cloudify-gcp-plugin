tosca_definitions_version: cloudify_dsl_1_3


imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - ../../../plugin.yaml


inputs:
  gcp_auth:
  project:
  network:
    default: default
  zone:
    default: us-east1-b

  image_id:
    default: https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20160921
    required: true


dsl_definitions:
  - &gcp_config
    auth: { get_input: gcp_auth }
    project: { get_input: project }
    network: { get_input: network }
    zone: { get_input: zone }


node_templates:

  proxy:
    type: cloudify.gcp.nodes.TargetProxy
    properties:
      url_map: { get_attribute: [url_map, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: url_map

  static_ip:
    type: cloudify.gcp.nodes.GlobalAddress
    properties:
      gcp_config: *gcp_config

  fw_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      sources:
        - 0.0.0.0/0
      allowed:
        tcp:
          - 80
      gcp_config: *gcp_config

  vm_sg:
    type: cloudify.gcp.nodes.SecurityGroup
    properties:
      rules:
        - sources:
            - 0.0.0.0/0
          allowed:
            tcp:
              - 80
      gcp_config: *gcp_config

  external_ip:
    type: cloudify.gcp.nodes.ExternalIP
    properties:
      gcp_config: *gcp_config

  vm:
    type: cloudify.gcp.nodes.Instance
    properties:
      image_id: { get_input: image_id }
      gcp_config: *gcp_config
      install_agent: false
      startup_script:
        type: string
        script: |
          #!/bin/bash
          yum update
          yum install -y httpd
          hostname > /var/www/html/index.html
          systemctl enable httpd
          systemctl start httpd
    relationships:
      - type: cloudify.gcp.relationships.instance_connected_to_instance_group
        target: instance_group
      - type: cloudify.gcp.relationships.instance_connected_to_ip
        target: external_ip
      - type: cloudify.gcp.relationships.instance_connected_to_security_group
        target: vm_sg

  instance_group:
    type: cloudify.gcp.nodes.InstanceGroup
    properties:
      gcp_config: *gcp_config

  healthcheck:
    type: cloudify.gcp.nodes.HealthCheck
    properties:
      gcp_config: *gcp_config

  backend:
    type: cloudify.gcp.nodes.BackendService
    properties:
      health_check: { get_attribute: [healthcheck, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: healthcheck
      - type: cloudify.gcp.relationships.uses_as_backend
        target: instance_group

  url_map:
    type: cloudify.gcp.nodes.UrlMap
    properties:
      default_service: { get_attribute: [backend, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: backend

  http_rule:
    type: cloudify.gcp.nodes.GlobalForwardingRule
    properties:
      target_proxy: { get_attribute: [proxy, selfLink] }
      port_range: 80
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.forwarding_rule_connected_to_target_proxy
        target: proxy
      - type: cloudify.relationships.connected_to
        target: static_ip


outputs:

  vm_ip:
    value: { get_attribute: [vm, ip] }

  vm_name:
    value: { get_attribute: [vm, name] }

  ip_ip:
    value: { get_attribute: [static_ip, address] }
