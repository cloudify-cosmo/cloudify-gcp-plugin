plugins:
  # Name could be anything, this name is what appears on the beginning of operation
  # mappings.
  gcp_plugin:
    # Could be 'central_deployment_agent' or 'host_agent'.
    # If 'central_deployment_agent', this plugin will be executed on the
    # deployment dedicated agent, other wise it will be executed on the host agent.
    executor: central_deployment_agent

    # URL to archive containing the plugin or name of directory containing
    # the plugin if it is included in the the blueprint directory under the
    # "plugins" directory.
    source: https://github.com/cloudify-cosmo/cloudify-gcp-plugin/archive/1.0-devel.zip

node_types:
  cloudify.gcp.nodes.Instance:
    derived_from: cloudify.nodes.Compute
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true) 
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      image_id:
        description: >
          The ID of the image in your GCP account.
        type: string
        default: {}
      instance_type:
        description: >
          The instance's type. All available instance types can be found here: 
          https://cloud.google.com/compute/docs/machine-types
        type: string
        default: n1-standard-1
      name:
        description: >
          Optional instance name. By default it will be instance id.
        type: string
        default: ''
      zone:
        description: >
          Optional zone name. If not given, this instance will be deployed
          in default zone.
        type: string
        default: ''
      tags:
        description: >
          Optional tags. If not given, this instance will have a tag only with
          its name.
        type: string
        default: ''
      block_project_ssh_keys:
        description: >
          Disable project-wide ssh keys for this Instance
        type: boolean
        default: false
      can_ip_forward:
        description: >
          Is the VM allowed to send packets with source address different to its own?
        type: boolean
        default: false
      scopes:
        description: >
          Optional scopes. If not will set by default: 
          'https://www.googleapis.com/auth/devstorage.read_write',
          'https://www.googleapis.com/auth/logging.write'
        default: []
      startup_script:
        description: >
          A script which will be run when the Instance is first started
          example:
            type: string
            script: |
              yum install some stuff
              systemctl start it
          or:
            type: file
            script: <path to script file>
        default:
          ''
      external_ip:
        description: >
          Should the Instance be created with an externally-accessible
          IP address. This will be an ephemeral IP.
          If you would like to use an IP address which can be transferred
          to another Instance then connect this Instance to an `Address`
          node using the
          `cloudify.gcp.relationships.instance_connected_to_ip`
          relationship.
        type: boolean
        default: false
      additional_settings:
        description: >
          Additional instance settings.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.create
          inputs:
            startup_script:
              default: { get_property: [SELF, startup_script]}
            external_ip:
              default: { get_property: [SELF, external_ip]}
            instance_type:
              default: { get_property: [SELF, instance_type]}
            image_id:
              default: { get_property: [SELF, image_id]}
            name:
              default: { get_property: [SELF, name]}
            zone:
              default: { get_property: [SELF, zone]}
            scopes:
              default: { get_property: [SELF, scopes] }
            tags:
              default: { get_property: [SELF, tags]}
            can_ip_forward:
              default: { get_property: [SELF, can_ip_forward]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        start:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.start
          inputs:
            name:
              default: { get_attribute: [SELF, name]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.delete
          inputs:
            name:
              default: { get_attribute: [SELF, name] }
            zone:
              default: { get_attribute: [SELF, zone]}

  cloudify.gcp.nodes.InstanceGroup:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional instance name. By default it will be instance group id.
        type: string
        default: ''
      named_ports:
        description: >
          A list of named ports defined for this instance group, the expected
          format is: [{name: 'name', port: 1234}, ... ].
        default: []
      additional_settings:
        description: >
          Additional setting for instance group
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.instance_group.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            named_ports:
              default: { get_property: [SELF, named_ports]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.instance_group.delete

  cloudify.gcp.nodes.Volume:
    derived_from: cloudify.nodes.Volume
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      image:
        description: >
          The image of the Volume.
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
      name:
        description: >
          Optional disk name. By default it will be disk id.
        type: string
        default: ''
      size:
        description: >
          Size of the Volume in GB.
        type: integer
        default: 10
      boot:
        description: >
          Will this disk be the boot disk for the Instance it is connected to?
        type: boolean
        default: no
      additional_settings:
        description: >
          Additional setting for volume
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.disk.create
          inputs:
            image:
              default: { get_property: [SELF, image] }
            name:
              default: { get_property: [SELF, name] }
            size:
              default: { get_property: [SELF, size] }
            boot:
              default: { get_property: [SELF, boot] }
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.disk.delete

  cloudify.gcp.nodes.Network:
    derived_from: cloudify.nodes.Network
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      name:
        description: >
          Optional Network name. The instance ID will be used by default.
        default: ''
      auto_subnets:
        description: >
          Whether to use the GCP "autoCreateSubnetworks" feature (see
          https://cloud.google.com/compute/docs/subnetworks#networks_and_subnetworks)
        default: true
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
      additional_settings:
        description: >
          Additional setting for network
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.network.create
          inputs:
            name:
              default: { get_property: [SELF, name] }
            auto_subnets:
              default: { get_property: [SELF, auto_subnets] }
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.network.delete
          inputs:
            name:
              default: { get_property: [SELF, name] }

  cloudify.gcp.nodes.SubNetwork:
    derived_from: cloudify.nodes.Subnet
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      name:
        description: >
          Optional SubNetwork name. The instance ID will be used by default.
        default: ''
      region:
        description: >
          The region this subnet is in. See https://cloud.google.com/compute/docs/regions-zones/regions-zones
        type: string
        default: ''
      subnet:
        description: >
          The subnet, denoted in CIDR form (i.e. '10.8.0.0/20')
          Subnets must be unique and non-overlapping within a project.
          See https://cloud.google.com/compute/docs/subnetworks#networks_and_subnetworks
        type: string
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.subnetwork.create
          inputs:
            name:
              default: { get_property: [SELF, name] }
            region:
              default: { get_property: [SELF, region] }
            subnet:
              default: { get_property: [SELF, subnet] }
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.subnetwork.delete
      cloudify.interfaces.validation:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.subnetwork.creation_validation

  cloudify.gcp.nodes.Route:
    derived_from: cloudify.nodes.Router
    properties:
      dest_range:
        description: >
          The outgoing range that this route will handle
      name:
        description: >
          Optional Route name. The instance ID will be used by default.
        default: ''
      tags:
        description: >
          Instance tags that this route will be applied to
        default: []
      next_hop:
        description: >
          The Instance, IP or VpnTunnel which will handle the matching packets
        default: ''
      priority:
        description: >
          The routing table priority for this route.
          Routes with lower priority numbers will be chosen first
          if more than one route with a matching prefix of the same length.
        default: 1000
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
      additional_settings:
        description: >
          Additional setting for firewall
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.route.create
          inputs:
            name:
              default: { get_property: [SELF, name] }
            dest_range:
              default: { get_property: [SELF, dest_range] }
            tags:
              default: { get_property: [SELF, tags] }
            next_hop:
              default: { get_property: [SELF, next_hop] }
            priority:
              default: { get_property: [SELF, priority] }
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.route.delete
          inputs:
            name:
              default: { get_attribute: [SELF, name] }

  cloudify.gcp.nodes.FirewallRule:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      name:
        description: >
          Optional security group name. By default it will be network name
          plus node name.
        default: ''
      allowed:
        description: >
          Dictionary of allowed ports per protocol, in the form
            protocol: [port, ...]
          If no ports are specified then all ports are opened for that protocol
          eg:
            tcp: 80, 443
            udp:
      sources:
        description: |
          List of CIDR formatted ranges and instance tags which
          will be permitted to connect to targets by this rule
          e.g.:
            - 10.100.101.0/24
            - a-tag
      target_tags:
        description: >
          List of target tags this rule should apply to. If no tags are
          specified, it will apply to all instances in the network
        default: []
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
      additional_settings:
        description: >
          Additional setting for firewall
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.firewall.create
          inputs:
            name:
              default: { get_property: [SELF, name] }
            allowed:
              default: { get_property: [SELF, allowed] }
            sources:
              default: { get_property: [SELF, sources] }
            target_tags:
              default: { get_property: [SELF, target_tags] }
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.firewall.delete

  cloudify.gcp.nodes.SecurityGroup:
    derived_from: cloudify.nodes.SecurityGroup
    properties:
      name:
        description: >
          Optional security group name. By default it will be network name
          plus node name.
        default: ''
      rules:
        description: >
          List of FirewallRules which will form this SecurityGroup.
          Only the `sources:` and `allowed:` fields should be supplied
          (see FirewallRule properties for details).
        default: []
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: gcp_plugin.cloudify_gcp.compute.security_group.create
          inputs: 
            rules:
              default: { get_property: [SELF, rules] }
            name:
              default: { get_property: [SELF, name] }
        configure:
          implementation: gcp_plugin.cloudify_gcp.compute.security_group.configure
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.security_group.delete
      cloudify.interfaces.validation:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.security_group.creation_validation

  cloudify.gcp.nodes.KeyPair:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      private_key_path:
        description: >
          The path where the key should be saved on the machine. If this is a bootstrap
          process, this refers to the local computer. If this will run on the manager,
          this will be saved on the manager.
        type: string
        default: ''
      public_key_path:
        description: >
          The path to read from existing public key.
        type: string
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the Google Cloud Platform API.
        default: {}
      user:
        description: >
          The user account for this key. A corresponding user account will be created by GCP when the key is added to the Instance. This must be supplied for a non-external resource key. See https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys
        type: string
        default: ''
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.keypair.create
          inputs:
            user: 
              default: { get_property: [SELF, user] }
            private_key_path: 
              default: { get_property: [SELF, private_key_path] }
            public_key_path:
              default: { get_property: [SELF, public_key_path] }
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.keypair.delete
          inputs:
            user: 
              default: { get_property: [SELF, user] }
            private_key_path: 
              default: { get_property: [SELF, private_key_path] }

  cloudify.gcp.nodes.ExternalIP:
    derived_from: cloudify.nodes.VirtualIP
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
          If set to true, this node will be static IP, otherwise ephemeral IP.
        type: boolean
        default: false
      ip_address:
        description: >
          Address of this external IP. This should be address of already existing,
          unattached static IP. It will be used only if "use_external_resource"
          is set to true.
        type: string
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}

  cloudify.gcp.nodes.GlobalAddress:
    derived_from: cloudify.nodes.VirtualIP
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
          If set to true, this node will be already existing static IP address, otherwise
          it will be reserved static IP address.
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional static ip name. By default it will be static ip id.
        type: string
        default: ''
      additional_settings:
        description: >
          Additional setting for static ip
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.address.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.address.delete

  cloudify.gcp.nodes.StaticIP:
    derived_from: cloudify.gcp.nodes.GlobalAddress

  cloudify.gcp.nodes.Address:
    derived_from: cloudify.gcp.nodes.GlobalAddress
    properties:
      region:
        description: >
          Region to place the Address in. If not provided it defaults to the
          value in `gcp_config` (which defaults to 'default').
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.address.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
            region:
              default: { get_property: [SELF, region]}

  cloudify.gcp.nodes.Image:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists or if Cloudify should create the resource.
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      image_name:
        description: >
          Name to use for the image. Defaults to the instance ID.
        default: ''
      image_path:
        description: >
          The (local system) path to the image file which will be uploaded.
        default: ''
      additional_settings:
        description: >
          Additional setting for image
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.image.create
          inputs:
            image_name:
              default: { get_property: [ SELF, image_name ] }
            image_path:
              default: { get_property: [ SELF, image_path ] }
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.image.delete

  cloudify.gcp.nodes.HealthCheck:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional health check name. By default it will be health check id.
        type: string
        default: ''
      health_check_type:
        description: >
          This field indicates if this health check is a HTTP or HTTPS based
          health check. Possible values are: 'http' and 'https'.
        type: string
        default: 'http'
      additional_settings:
        description: >
          Optional additional settings. Possible fields in dictionary are:
          port, request_path, timeout_sec, check_interval_sec,
          healthy_threshold, unhealthy_threshold.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.health_check.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            health_check_type:
              default: { get_property: [SELF, health_check_type]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.health_check.delete

  cloudify.gcp.nodes.BackendService:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional health check name. By default it will be backend service id.
        type: string
        default: ''
      health_check:
        description: >
          URL of a health check assigned to this backend service.
        type: string
        default: ''
      additional_settings:
        description: >
          Optional additional settings. Possible fields in dictionary are:
          port_name, protocol, timeout_sec.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.backend_service.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            health_check:
              default: { get_property: [SELF, health_check]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.backend_service.delete

  cloudify.gcp.nodes.UrlMap:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional health check name. By default it will be URL map id.
        type: string
        default: ''
      default_service:
        description: >
          URL of a backend service to which this URL map will redirect traffic by default.
        type: string
        default: ''
      additional_settings:
        description: >
          Additional setting for url map
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.url_map.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            default_service:
              default: { get_property: [SELF, default_service]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.url_map.delete

  cloudify.gcp.nodes.TargetProxy:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional target proxy name. By default it will be target proxy id.
        type: string
        default: ''
      target_proxy_type:
        description: >
          This field indicates if this target proxy is a HTTP or HTTPS based
          target proxy. Possible values are: 'http' and 'https'.
        type: string
        default: 'http'
      url_map:
        description: >
          URL of a URL map which specifies how traffic from this target proxy
          should be redirected.
        type: string
        default: ''
      ssl_certificate:
        description: >
          URL of a SSL certificate associated with this target proxy.
          Can and must be used only with https type proxy.
        type: string
        default: ''
      additional_settings:
        description: >
          Additional setting for target proxy
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.target_proxy.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            target_proxy_type:
              default: { get_property: [SELF, target_proxy_type]}
            url_map:
              default: { get_property: [SELF, url_map]}
            ssl_certificate:
              default: { get_property: [SELF, ssl_certificate]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.target_proxy.delete

  cloudify.gcp.nodes.SslCertificate:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional SSL certificate name. By default it will be SSL certificate id.
        type: string
        default: ''
      private_key:
        description: >
          Dictionary describing private key in PEM format used to generate this SSL certificate.
          Expected format is:
            type: text|file
            data: Private key in PEM format if text, otherwise path to a file with private key
        default: {}
      certificate:
        description: >
          Certificate (self-signed or obtained from CA) in PEM format.
          Expected format is:
            type: text|file
            data: Certificate in PEM format if text, otherwise path to a file with certificate
        default: {}
      additional_settings:
        description: >
          Additional setting for target proxy
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.ssl_certificate.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            private_key:
              default: { get_property: [SELF, private_key]}
            certificate:
              default: { get_property: [SELF, certificate]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.ssl_certificate.delete

  cloudify.gcp.nodes.GlobalForwardingRule:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true)
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      name:
        description: >
          Optional global forwarding rule name. By default it will be
          global forwarding rule id.
        type: string
        default: ''
      target_proxy:
        description: >
          URL of a target proxy (http or https) that will receive traffic
          coming from specified IP address.
        type: string
        default: ''
      port_range:
        description: >
          Port number used by this forwarding rule. If packets are redirected to
          HTTP proxy, then possible values are 80 and 8080, in case of HTTPS proxy
          the only accepted value is 443.
        type: string
        default: '80'
      ip_address:
        description: >
          IP address associated with this forwarding rule. This address
          should be reserved earlier.
        type: string
        default: ''
      additional_settings:
        description: >
          Additional setting for ssl certificate
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.forwarding_rule.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            target_proxy:
              default: { get_property: [SELF, target_proxy]}
            port_range:
              default: { get_property: [SELF, port_range]}
            ip_address:
              default: { get_property: [SELF, ip_address]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.compute.forwarding_rule.delete
      cloudify.interfaces.validation:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.forwarding_rule.creation_validation

  cloudify.gcp.nodes.DNSZone:
    derived_from: cloudify.nodes.Root
    properties:
      use_external_resource:
        description: >
          Indicate whether the resource exists and use existing (true) 
          or if Cloudify should create new resource (false).
        type: boolean
        default: false
      name:
        type: string
        description: >
          (internal) name of the zone. Defaults to the instance ID.
        default: ''
      dns_name:
        description: >
          (fully qualified) domain name of the zone.
          Defaults to the instance ID.
        type: string
        default: ''
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
      additional_settings:
        description: >
          Additional settings
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.dns.dns.create
          inputs:
            name:
              default: { get_property: [SELF, name]}
            dns_name:
              default: { get_property: [SELF, dns_name]}
            additional_settings:
              default: { get_property: [SELF, additional_settings]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.dns.dns.delete

  cloudify.gcp.nodes.DNSRecord:
    derived_from: cloudify.nodes.Root
    properties:
      type:
        description: >
          The type of this DNS record.
          Only one record of each type is allowed with the same name within
          a zone.
        type: string
        default: A
      name:
        description: >
          The subdomain. This will be prepended to the DNSZone's dns_name
          to produce the full domain name for this record.
          Defaults to the instance ID.
        type: string
        default: ''
      resources:
        description: >
          List of resources which will form this record.
          (can be augmented using relationships
            cloudify.gcp.relationships.dns_record_connected_to_instance
            and
            cloudify.gcp.relationships.dns_record_connected_to_ip
            )
        default: []
      ttl:
        description: >
          DNS entry Time To Live
        type: integer
        default: 86400
      gcp_config:
        description: >
          A dictionary of values to pass to authenticate with the GCP API.
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: gcp_plugin.cloudify_gcp.dns.record.create
          inputs:
            type:
              default: { get_property: [SELF, type]}
            name:
              default: { get_property: [SELF, name]}
            resources:
              default: { get_property: [SELF, resources]}
            ttl:
              default: { get_property: [SELF, ttl]}
        delete:
          implementation: gcp_plugin.cloudify_gcp.dns.record.delete

  cloudify.gcp.nodes.DNSAAAARecord:
    derived_from: cloudify.gcp.nodes.DNSRecord
    properties:
      type:
        default: AAAA

  cloudify.gcp.nodes.DNSMXRecord:
    derived_from: cloudify.gcp.nodes.DNSRecord
    properties:
      type:
        default: MX

  cloudify.gcp.nodes.DNSNSRecord:
    derived_from: cloudify.gcp.nodes.DNSRecord
    properties:
      type:
        default: NS

  cloudify.gcp.nodes.DNSTXTRecord:
    derived_from: cloudify.gcp.nodes.DNSRecord
    properties:
      type:
        default: TXT


relationships:

  cloudify.gcp.relationships.instance_connected_to_security_group:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.add_instance_tag
          inputs:
            instance_name: 
              default: { get_attribute: [SOURCE, name] }
            zone:
              default: { get_attribute: [SOURCE, zone] }
            tag:
              default: [{ get_attribute: [TARGET, name] }]
        unlink:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.remove_instance_tag
          inputs:
            instance_name: 
              default: { get_attribute: [SOURCE, name] }
            zone:
              default: { get_attribute: [SOURCE, zone] }
            tag:
              default: [{ get_attribute: [TARGET, name] }]

  cloudify.gcp.relationships.instance_connected_to_ip:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.add_external_ip
          inputs:
            instance_name: 
              default: { get_attribute: [SOURCE, name] }
            zone:
              default: { get_attribute: [SOURCE, zone] }
        unlink:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.remove_external_ip
          inputs:
            instance_name: 
              default: { get_attribute: [SOURCE, name] }
            zone:
              default: { get_attribute: [SOURCE, zone] }

  cloudify.gcp.relationships.instance_connected_to_keypair:
    derived_from: cloudify.relationships.connected_to
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.add_ssh_key
          inputs:
            instance_name:
              default: { get_attribute: [SOURCE, name] }

  cloudify.gcp.relationships.instance_connected_to_disk:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.attach_disk
          inputs:
            instance_name: 
              default: { get_attribute: [TARGET, name] }
            zone:
              default: { get_attribute: [TARGET, zone] }
            disk: 
              default: { get_attribute: [SOURCE, gcp_disk] }
        unlink:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.detach_disk
          inputs:
            instance_name: 
              default: { get_property: [TARGET, name] }
            zone:
              default: { get_attribute: [TARGET, zone] }
            disk_name: 
              default: { get_attribute: [SOURCE, name] }

  cloudify.gcp.relationships.instance_connected_to_instance_group:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: gcp_plugin.cloudify_gcp.compute.instance_group.add_to_instance_group
          inputs:
            instance_group_name:
              default: { get_attribute: [TARGET, name] }
            instance_url:
              default: { get_attribute: [SOURCE, selfLink] }
        unlink:
          implementation: gcp_plugin.cloudify_gcp.compute.instance_group.remove_from_instance_group
          inputs:
            instance_group_name:
              default: { get_attribute: [TARGET, name] }
            instance_url:
              default: { get_attribute: [SOURCE, selfLink] }

  cloudify.gcp.relationships.uses_as_backend:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish:
          implementation: gcp_plugin.cloudify_gcp.compute.backend_service.add_backend
          inputs:
            backend_service_name:
              default: { get_attribute: [SOURCE, name] }
            group_self_url:
              default: { get_attribute: [TARGET, selfLink] }
        unlink:
          implementation: gcp_plugin.cloudify_gcp.compute.backend_service.remove_backend
          inputs:
            backend_service_name:
              default: { get_attribute: [SOURCE, name] }
            group_self_url:
              default: { get_attribute: [TARGET, selfLink] }

  cloudify.gcp.relationships.contained_in_compute:
    derived_from: cloudify.relationships.contained_in
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.contained_in

  cloudify.gcp.relationships.dns_record_contained_in_zone:
    derived_from: cloudify.relationships.contained_in
    source_interfaces:
      cloudify.interfaces.validation:
        create:
          implementation: gcp_plugin.cloudify_gcp.dns.record.validate_contained_in

  cloudify.gcp.relationships.dns_record_connected_to_instance:
    derived_from: cloudify.relationships.connected_to

  cloudify.gcp.relationships.dns_record_connected_to_ip:
    derived_from: cloudify.relationships.connected_to

  cloudify.gcp.relationships.contained_in_network:
    derived_from: cloudify.relationships.contained_in

  cloudify.gcp.relationships.instance_contained_in_network:
    derived_from: cloudify.relationships.contained_in
    source_interfaces:
      cloudify.interfaces.validation:
        create:
          implementation: gcp_plugin.cloudify_gcp.compute.instance.validate_contained_in_network

  cloudify.gcp.relationships.forwarding_rule_connected_to_target_proxy:
    derived_from: cloudify.relationships.connected_to
