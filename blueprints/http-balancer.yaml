tosca_definitions_version: cloudify_dsl_1_3


imports:
  - http://www.getcloudify.org/spec/cloudify/4.1/types.yaml
  - ../plugin.yaml


inputs:
  gcp_auth:
  project:
    default: trammell-project
  network:
    default: default
  zone:
  group_name:



dsl_definitions:
  - &gcp_config
    auth: { get_input: gcp_auth }
    project: { get_input: project }
    network: { get_input: network }
    zone: { get_input: zone }


node_templates:

  proxy:
    type: cloudify.gcp.nodes.TargetProxy
    properties:
      url_map: { get_attribute: [url_map, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: url_map

  static_ip:
    type: cloudify.gcp.nodes.GlobalAddress
    properties:
      gcp_config: *gcp_config

  fw_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      sources:
        - 0.0.0.0/0
      allowed:
        tcp:
          - 80
      target_tags: [http-forwarding-fw]
      gcp_config: *gcp_config


  instance_group:
    type: cloudify.gcp.nodes.InstanceGroup
    properties:
      gcp_config: *gcp_config
      use_external_resource: true
      name: { get_input: group_name }

  healthcheck:
    type: cloudify.gcp.nodes.HealthCheck
    properties:
      gcp_config: *gcp_config

  backend:
    type: cloudify.gcp.nodes.BackendService
    properties:
      health_check: { get_attribute: [healthcheck, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: healthcheck
      - type: cloudify.gcp.relationships.uses_as_backend
        target: instance_group

  url_map:
    type: cloudify.gcp.nodes.UrlMap
    properties:
      default_service: { get_attribute: [backend, selfLink] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: backend

  http_rule:
    type: cloudify.gcp.nodes.GlobalForwardingRule
    properties:
      target_proxy: { get_attribute: [proxy, selfLink] }
      port_range: 80
      ip_address: { get_attribute: [static_ip, address] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.forwarding_rule_connected_to_target_proxy
        target: proxy
      - type: cloudify.relationships.connected_to
        target: static_ip


outputs:
  ip_ip:
    value: { get_attribute: [static_ip, address] }
