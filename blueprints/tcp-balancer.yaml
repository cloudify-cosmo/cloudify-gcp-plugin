tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-gcp-plugin

inputs:

  zone:
    type: string
    default: { get_secret: zone }

  region:
    type: string
    default: { get_secret: region }

  prefix:
    type: string

  network_name:
    type: string
    default: { concat: [ { get_input: prefix }, '-network' ] }

  subnetwork_name:
    type: string
    default: { concat: [ { get_input: prefix }, '-subnetwork' ] }

  group_name:
    type: string
    default: 'group-1'

  firewall_rule_target_tags:
    default:
    - http-forwarding-fw

  balancer_port:
    default: 110

  network_subnet0_cidr:
    default: 10.11.12.0/22


dsl_definitions:

  client_config: &gcp_config
    auth: { get_secret: gcp_credentials }
    zone: { get_input: zone }

node_templates:

  static_ip:
    type: cloudify.gcp.nodes.GlobalAddress
    properties:
      gcp_config: *gcp_config

  proxy:
    type: cloudify.gcp.nodes.TargetProxy
    properties:
      service: { get_attribute: [backend, selfLink] }
      target_proxy_type: tcp
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: backend

  http_rule:
    type: cloudify.gcp.nodes.GlobalForwardingRule
    properties:
      target_proxy: { get_attribute: [proxy, selfLink] }
      port_range: { get_input: balancer_port }
      ip_address: { get_attribute: [static_ip, address] }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.forwarding_rule_connected_to_target_proxy
        target: proxy
      - type: cloudify.relationships.connected_to
        target: static_ip

  backend:
    type: cloudify.gcp.nodes.BackendService
    properties:
      health_check: { get_attribute: [healthcheck, selfLink] }
      protocol: TCP
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: healthcheck
      - type: cloudify.gcp.relationships.uses_as_backend
        target: instance_group

  healthcheck:
    type: cloudify.gcp.nodes.HealthCheck
    properties:
      health_check_type: tcp
      port: { get_input: balancer_port }
      gcp_config: *gcp_config

  instance_group:
    type: cloudify.gcp.nodes.InstanceGroup
    properties:
      gcp_config: *gcp_config
      use_external_resource: true
      name: { get_input: group_name }

  fw_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      sources:
      - 0.0.0.0/0
      allowed:
        tcp:
        - { get_input: balancer_port }
      target_tags:
      - { get_input: firewall_rule_target_tags }
      gcp_config: *gcp_config

  subnetwork:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
    #  use_external_resource: true
      name: { get_input: subnetwork_name }
      region: { get_input: region }
      subnet: { get_input: network_subnet0_cidr }
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.contained_in_network
        target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
    #  use_external_resource: true
      name: { get_input: network_name }
      gcp_config: *gcp_config
      auto_subnets: false

outputs:

  ip:
    value: { get_attribute: [static_ip, address] }
